{
  "version": 3,
  "sources": ["../src/constants.ts", "../src/debounce.ts", "../src/provebilde-bakgrunn.ts", "../src/provebilde-sirkel.ts", "../src/provebilde.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Size } from \"./abstractions.ts\";\r\n\r\nexport const pal: Size = [768, 576];\r\n", "type Func<TArgs extends any[], TReturn> = (...args: TArgs) => TReturn;\r\n\r\nexport function debounce<TArgs extends any[]>(\r\n    func: Func<TArgs, any>,\r\n    wait: number,\r\n    immediate: boolean = false\r\n): Func<TArgs, void> {\r\n    let timeout: number | null = null;\r\n    return (...args: TArgs) => {\r\n        const later = (): void => {\r\n            timeout = null;\r\n            if (!immediate) {\r\n                func(...args);\r\n            }\r\n        };\r\n        const callNow = immediate && !timeout;\r\n        if (timeout !== null) {\r\n            clearTimeout(timeout);\r\n        }\r\n        timeout = setTimeout(later, wait) as unknown as number;\r\n        if (callNow) {\r\n            func(...args);\r\n        }\r\n    };\r\n}\r\n", "import type { Coord, EdgeColor } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\n\r\nexport class ProveBildeBakgrunn {\r\n    constructor(ctx: CanvasRenderingContext2D, edgeColor: EdgeColor) {\r\n        this.edgeColor = edgeColor;\r\n        this.ctx = ctx;\r\n        [this.leftGridStripesPattern, this.rightGridStripesPattern] =\r\n            this.createGridStripePatterns(\r\n                [\"#b85a7a\", \"#3c9a7a\"],\r\n                [\"#7a64e9\", \"#7a900b\"]\r\n            );\r\n    }\r\n\r\n    private readonly edgeColor: EdgeColor;\r\n    private readonly ctx: CanvasRenderingContext2D;\r\n\r\n    private readonly gridSquareSize: number = 42;\r\n    private readonly leftGridStripesPattern: CanvasPattern;\r\n    private readonly rightGridStripesPattern: CanvasPattern;\r\n    private readonly defaultGray: string = \"#7a7a7a\";\r\n    private readonly gridOffset: Coord = [-15, -27];\r\n\r\n    private get gridSquareColCount(): number {\r\n        const [w] = pal;\r\n        const [offsetX] = this.gridOffset;\r\n        const size = this.gridSquareSize;\r\n        return Math.ceil((w - offsetX) / size);\r\n    }\r\n\r\n    private get gridSquareRowCount(): number {\r\n        const [, h] = pal;\r\n        const [, offsetY] = this.gridOffset;\r\n        const size = this.gridSquareSize;\r\n        return Math.ceil((h - offsetY) / size);\r\n    }\r\n\r\n    private drawGridSquare(fillStyle: string | CanvasPattern): void {\r\n        const size = this.gridSquareSize;\r\n        const { ctx } = this;\r\n        ctx.save();\r\n\r\n        // Draw white outline\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(0, 0, size, size);\r\n\r\n        // Draw fill\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.fillRect(1, 1, size - 2, size - 2);\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.edgeColor.lighten;\r\n        ctx.fillRect(1, 1, 1, size - 2);\r\n        ctx.fillRect(size - 2, 1, 1, size);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    private getGridSquareFill(...offset: Coord): string | CanvasPattern {\r\n        const [cols, rows] = [this.gridSquareColCount, this.gridSquareRowCount];\r\n        const [x, y] = offset;\r\n        const [gridOffsetX, gridOffsetY] = this.gridOffset;\r\n        const horSquareIndex = (x - gridOffsetX) / this.gridSquareSize;\r\n        const verSquareIndex = (y - gridOffsetY) / this.gridSquareSize;\r\n        const isOutsideHorBounds =\r\n            horSquareIndex === 0 || horSquareIndex >= cols - 1;\r\n        const isOutsideVerBounds =\r\n            verSquareIndex === 0 || verSquareIndex >= rows - 1;\r\n        const isSecondLeftMostSquare = horSquareIndex === 1;\r\n        const isSecondRightMostSquare = horSquareIndex === cols - 2;\r\n        const isSecondTopMostSquare = verSquareIndex === 1;\r\n        const isSecondBottomMostSquare = verSquareIndex === rows - 2;\r\n\r\n        let result: string | CanvasPattern;\r\n        if (isOutsideHorBounds || isOutsideVerBounds) {\r\n            const isEven = (horSquareIndex + verSquareIndex) % 2 === 0;\r\n            result = isEven ? \"#fff\" : \"#000\";\r\n        } else if (isSecondLeftMostSquare) {\r\n            if (isSecondTopMostSquare) {\r\n                result = this.makeHalfGridStripePattern(\r\n                    this.leftGridStripesPattern,\r\n                    \"top\"\r\n                );\r\n            } else if (isSecondBottomMostSquare) {\r\n                result = this.makeHalfGridStripePattern(\r\n                    this.leftGridStripesPattern,\r\n                    \"bottom\"\r\n                );\r\n            } else {\r\n                result = this.leftGridStripesPattern;\r\n            }\r\n        } else if (isSecondRightMostSquare) {\r\n            if (isSecondTopMostSquare) {\r\n                result = this.makeHalfGridStripePattern(\r\n                    this.rightGridStripesPattern,\r\n                    \"top\"\r\n                );\r\n            } else if (isSecondBottomMostSquare) {\r\n                result = this.makeHalfGridStripePattern(\r\n                    this.rightGridStripesPattern,\r\n                    \"bottom\"\r\n                );\r\n            } else {\r\n                result = this.rightGridStripesPattern;\r\n            }\r\n        } else {\r\n            result = this.defaultGray;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private createGridStripePatterns(\r\n        ...palettes: Array<[color1: string, color2: string]>\r\n    ): CanvasPattern[] {\r\n        const ctx = new OffscreenCanvas(1, 4).getContext(\"2d\")!;\r\n        return palettes.map(([color1, color2]) => {\r\n            ctx.fillStyle = color1;\r\n            ctx.fillRect(0, 0, 1, 2);\r\n            ctx.fillStyle = color2;\r\n            ctx.fillRect(0, 2, 1, 2);\r\n            return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n        });\r\n    }\r\n\r\n    private makeHalfGridStripePattern(\r\n        stripePattern: CanvasPattern,\r\n        noStripesAt: \"top\" | \"bottom\"\r\n    ): CanvasPattern {\r\n        const ctx = new OffscreenCanvas(\r\n            this.gridSquareSize,\r\n            this.gridSquareSize\r\n        ).getContext(\"2d\")!;\r\n        ctx.fillStyle = stripePattern;\r\n        ctx.fillRect(0, 0, this.gridSquareSize, this.gridSquareSize);\r\n        ctx.fillStyle = this.defaultGray;\r\n        if (noStripesAt === \"top\") {\r\n            ctx.fillRect(0, 0, this.gridSquareSize, this.gridSquareSize / 2);\r\n        } else {\r\n            ctx.fillRect(\r\n                0,\r\n                this.gridSquareSize / 2,\r\n                this.gridSquareSize,\r\n                this.gridSquareSize / 2\r\n            );\r\n        }\r\n        ctx.fill();\r\n        return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        const { ctx } = this;\r\n        ctx.save();\r\n        const [palW, palH] = pal;\r\n        const [gridOffsetX, gridOffsetY] = this.gridOffset;\r\n        for (\r\n            let transY = gridOffsetY;\r\n            transY < palH;\r\n            transY += this.gridSquareSize\r\n        ) {\r\n            for (\r\n                let transX = gridOffsetX;\r\n                transX < palW;\r\n                transX += this.gridSquareSize\r\n            ) {\r\n                ctx.save();\r\n                ctx.translate(transX, transY);\r\n                this.drawGridSquare(this.getGridSquareFill(transX, transY));\r\n                ctx.restore();\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    private drawLeftColorBar(): void {\r\n        const { ctx } = this;\r\n        ctx.save();\r\n        const colors: [string, string, string, string] = [\r\n            \"#3c9a7a\",\r\n            \"#577ad6\",\r\n            \"#b85a7a\",\r\n            \"#9d7a1e\"\r\n        ];\r\n        const squareSize = this.gridSquareSize;\r\n        const [gridOffsetX, gridOffsetY] = this.gridOffset;\r\n        const border = 2;\r\n\r\n        // Left 1/4:\r\n        [ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n\r\n        // Left 2/4\r\n        [, ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Left 3/4\r\n        [, , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 7.5 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Left 4/4\r\n        [, , , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.edgeColor.lighten;\r\n\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 11 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 4 - border,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3 - border,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            1,\r\n            squareSize * 7 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 4 - border,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.restore();\r\n    }\r\n\r\n    private drawRightColorBar(): void {\r\n        const { ctx } = this;\r\n        ctx.save();\r\n        const colors: [string, string, string, string] = [\r\n            \"#577ad6\",\r\n            \"#7a900b\",\r\n            \"#9d7a1e\",\r\n            \"#7a64e9\"\r\n        ];\r\n        const squareSize = this.gridSquareSize;\r\n        const [gridOffsetX, gridOffsetY] = this.gridOffset;\r\n        const border = 2;\r\n\r\n        // Right 1/4\r\n        [ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Right 2/4:\r\n        [, ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n\r\n        // Right 3/4\r\n        [, , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Right 4/4\r\n        [, , , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 7.5 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.edgeColor.lighten;\r\n\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 17 - border,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 11 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            1,\r\n            squareSize * 7 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.restore();\r\n    }\r\n\r\n    render(): void {\r\n        this.drawGrid();\r\n        this.drawLeftColorBar();\r\n        this.drawRightColorBar();\r\n    }\r\n}\r\n", "import type { EdgeColor, Rect } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\n\r\nexport class ProveBildeSirkel {\r\n    constructor(ctx: CanvasRenderingContext2D, edgeColor: EdgeColor) {\r\n        this.edgeColor = edgeColor;\r\n        this.ctx = ctx;\r\n\r\n        const [palW, palH] = pal;\r\n        const [fW, fgH] = [84 * 6, 84 * 6];\r\n        const [fgX, fgY] = [palW / 2 - fW / 2, palH / 2 - fgH / 2];\r\n        this.rect = [fgX, fgY, fW, fgH];\r\n    }\r\n\r\n    private readonly edgeColor: EdgeColor;\r\n    private readonly ctx: CanvasRenderingContext2D;\r\n    private readonly rect: Rect;\r\n\r\n    private translate<TReturn>(\r\n        x: number,\r\n        y: number,\r\n        callback: () => TReturn\r\n    ): TReturn {\r\n        const { ctx } = this;\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        const result = callback();\r\n        ctx.restore();\r\n        return result;\r\n    }\r\n\r\n    private createGradientPattern(width: number): CanvasPattern {\r\n        const ctx = new OffscreenCanvas(width, 1).getContext(\"2d\")!;\r\n        const gradient = ctx.createLinearGradient(0, 0, width, 1);\r\n        gradient.addColorStop(0, \"#000\");\r\n        gradient.addColorStop(0.5, \"#fff\");\r\n        gradient.addColorStop(1, \"#000\");\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, width, 1);\r\n        return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n    }\r\n\r\n    private renderTopRow(): number {\r\n        const { ctx } = this;\r\n        const [, , fW] = this.rect;\r\n        const h = 21;\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n        return h;\r\n    }\r\n\r\n    private renderHeaderRow(): number {\r\n        const { ctx } = this;\r\n        const [, , fW] = this.rect;\r\n        const h = 42;\r\n        const w = 168;\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-w / 2, 0, w, h);\r\n        return h;\r\n    }\r\n\r\n    private renderReflectionCheckRow(inverse?: boolean): number {\r\n        const { ctx } = this;\r\n        const [, , fW] = this.rect;\r\n        const h = 42;\r\n\r\n        // Background rect\r\n        ctx.fillStyle = inverse ? \"#000\" : \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        ctx.fillStyle = inverse ? \"#fff\" : \"#000\";\r\n\r\n        // Left rect\r\n        ctx.fillRect(-fW / 2, 0, 126, h);\r\n        // Right rect\r\n        ctx.fillRect(fW / 2 - 126, 0, 126, h);\r\n\r\n        // Reflection bar\r\n        ctx.fillRect(-fW / 2 + 145, 0, 4, h);\r\n        // Reflection bar Blur borders\r\n        ctx.fillStyle = inverse\r\n            ? \"rgb(0 0 0 / 0.333)\"\r\n            : \"rgb(255 255 255 / 0.333)\";\r\n        ctx.fillRect(-fW / 2 + 145, 0, 1, h);\r\n        ctx.fillRect(-fW / 2 + 148, 0, 1, h);\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderSquareWave75Row(): number {\r\n        const { ctx } = this;\r\n        const itemW = 30;\r\n        const h = 42;\r\n        const [, , fW] = this.rect;\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(-fW / 2, 0, fW, h);\r\n        ctx.clip();\r\n\r\n        for (let i = 0, x = -9 * itemW; i < 18; i++, x += itemW) {\r\n            ctx.fillStyle = i % 2 === 0 ? \"#bfbfbf\" : \"#000\";\r\n            ctx.fillRect(x, 0, itemW, h);\r\n        }\r\n\r\n        ctx.closePath();\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderColoBar75Row(): number {\r\n        const { ctx } = this;\r\n        const h = 84;\r\n        const itemW = 84;\r\n        const colors = [\r\n            \"#bfbf00\",\r\n            \"#00bfbf\",\r\n            \"#00bf00\",\r\n            \"#bf00bf\",\r\n            \"#bf0000\",\r\n            \"#0000bf\"\r\n        ];\r\n        for (const [i, color] of colors.entries()) {\r\n            const x = (i - 3) * itemW;\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(x, 0, itemW, h);\r\n        }\r\n        return h;\r\n    }\r\n\r\n    private renderCrossedLines(): number {\r\n        const { ctx } = this;\r\n        const [, , fW] = this.rect;\r\n        const h = 42;\r\n        const itemW = 42;\r\n\r\n        // Black background\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        // Horizontal line\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, h / 2 - 1, fW, 2);\r\n\r\n        for (let x = -itemW * 6.5 - 2; x < itemW * 6.5; x += itemW) {\r\n            // Line\r\n            ctx.fillRect(x, 0, 4, h);\r\n\r\n            // Darkened edges:\r\n            ctx.save();\r\n            ctx.fillStyle = this.edgeColor.darken;\r\n            ctx.fillRect(x, 0, 1, h);\r\n            ctx.fillRect(x + 3, 0, 1, h);\r\n            ctx.restore();\r\n        }\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderDefinitionLinesRow(): number {\r\n        const { ctx } = this;\r\n        const h = 84;\r\n        const itemW = 84;\r\n        const [, , fW] = this.rect;\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(-fW / 2, 0, fW, h);\r\n        ctx.clip();\r\n\r\n        let x = -3.5 * itemW;\r\n        const pixelFactor = 12;\r\n        const squares = [\"#000\", 0.8, 1.8, 2.8, 3.8, 4.8, \"#000\"];\r\n        for (const fillInfo of squares) {\r\n            ctx.fillStyle =\r\n                typeof fillInfo === \"string\"\r\n                    ? fillInfo\r\n                    : this.createGradientPattern(pixelFactor / fillInfo);\r\n\r\n            ctx.translate(x, 0);\r\n            ctx.fillRect(0, 0, itemW, h);\r\n            ctx.translate(-x, 0);\r\n            x += itemW;\r\n        }\r\n\r\n        ctx.closePath();\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderGrayScaleStairCaseRow(): number {\r\n        const { ctx } = this;\r\n        const h = 42;\r\n        const itemW = 84;\r\n\r\n        let x = -3 * itemW;\r\n        for (let i = 0; i < 6; i++) {\r\n            const lightness = 51 * i;\r\n            const hex = Math.round(lightness).toString(16).padStart(2, \"0\");\r\n            ctx.fillStyle = `#${hex}${hex}${hex}`;\r\n            ctx.fillRect(x, 0, itemW, h);\r\n            x += itemW;\r\n        }\r\n        return h;\r\n    }\r\n\r\n    private renderColorStep75Row(): number {\r\n        const { ctx } = this;\r\n        const h = 65;\r\n        const itemW = 40;\r\n        const [, , fW] = this.rect;\r\n\r\n        ctx.fillStyle = \"#bfbf00\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        ctx.fillStyle = \"rgb(185 25 18)\";\r\n        ctx.fillRect(-itemW / 2, 0, itemW, h);\r\n\r\n        ctx.fillStyle = \"rgb(255 255 255 / 0.333)\";\r\n        ctx.fillRect(-itemW / 2, 0, 1, h);\r\n        ctx.fillRect(itemW / 2 - 1, 0, 1, h);\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderCrossHair(): number {\r\n        const { ctx } = this;\r\n        const h = 42 * 3;\r\n        const itemW = 38;\r\n\r\n        // Black background\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-itemW / 2, 0, itemW, h);\r\n        // Darkened edges\r\n        ctx.save();\r\n        ctx.fillStyle = this.edgeColor.darken;\r\n        ctx.fillRect(-itemW / 2 - 1, 0, 1, 42);\r\n        ctx.fillRect(itemW / 2, 0, 1, 42);\r\n        ctx.fillRect(-itemW / 2 - 1, 42 * 2, 1, 42);\r\n        ctx.fillRect(itemW / 2, 42 * 2, 1, 42);\r\n        ctx.restore();\r\n\r\n        ctx.fillStyle = \"#fff\";\r\n\r\n        // Horizontal line\r\n        ctx.fillRect(-itemW / 2, h / 2 - 1, itemW, 2);\r\n\r\n        // Vertical line\r\n        ctx.fillRect(-2, 0, 4, h);\r\n\r\n        // Darkened edges:\r\n        ctx.save();\r\n        ctx.fillStyle = this.edgeColor.darken;\r\n        ctx.fillRect(-2, 0, 1, h);\r\n        ctx.fillRect(1, 0, 1, h);\r\n        ctx.restore();\r\n\r\n        return h;\r\n    }\r\n\r\n    private renderCompleteForground(y: number, cX: number): void {\r\n        const trans = this.translate.bind(this);\r\n\r\n        // Row 1\r\n        y += trans(cX, y, () => this.renderTopRow());\r\n\r\n        // Row 2\r\n        y += trans(cX, y, () => this.renderHeaderRow());\r\n\r\n        // Row 3\r\n        y += trans(cX, y, () => this.renderReflectionCheckRow(false));\r\n\r\n        // Row 4\r\n        y += trans(cX, y, () => this.renderSquareWave75Row());\r\n\r\n        // Row 5\r\n        y += trans(cX, y, () => this.renderColoBar75Row());\r\n\r\n        // Row 6\r\n        y += trans(cX, y, () => this.renderCrossedLines());\r\n\r\n        // Row 7\r\n        y += trans(cX, y, () => this.renderDefinitionLinesRow());\r\n\r\n        // Row 8\r\n        y += trans(cX, y, () => this.renderGrayScaleStairCaseRow());\r\n\r\n        // Row 9\r\n        y += trans(cX, y, () => this.renderReflectionCheckRow(true));\r\n\r\n        // Row 10\r\n        trans(cX, y, () => this.renderColorStep75Row());\r\n\r\n        // Move y to top of crosshair\r\n        y = pal[1] / 2 - 63;\r\n        // Render crosshair\r\n        trans(cX, y, () => this.renderCrossHair());\r\n    }\r\n\r\n    render(): void {\r\n        const [palW, palH] = pal;\r\n        const [centerX, centerY] = [palW / 2, palH / 2];\r\n        const radius = 84 * 3;\r\n\r\n        // Circle clip\r\n        const { ctx } = this;\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n        ctx.clip();\r\n\r\n        const foreGroundYOffset = (palH - radius * 2) / 2;\r\n        this.renderCompleteForground(foreGroundYOffset, centerX);\r\n        ctx.closePath();\r\n    }\r\n}\r\n", "import type { EdgeColor } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\nimport { ProveBildeBakgrunn } from \"./provebilde-bakgrunn.ts\";\r\nimport { ProveBildeSirkel } from \"./provebilde-sirkel.ts\";\r\n\r\nexport interface ProveBildeOptions {\r\n    noBlurEdges?: boolean;\r\n    headerText?: string;\r\n    footerText?: string;\r\n    showDate?: boolean;\r\n    showTime?: boolean;\r\n}\r\n\r\nexport const defaultEdgeColor: EdgeColor = {\r\n    lighten: \"rgb(255 255 255 / 0.666)\",\r\n    darken: \"rgb(0 0 0 / 0.333)\"\r\n};\r\n\r\nexport class ProveBilde {\r\n    constructor(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: ProveBildeOptions = {}\r\n    ) {\r\n        this.options = options;\r\n        this.ctx = ctx;\r\n\r\n        const transp = \"rgb(0 0 0 / 0)\";\r\n        const edgeColor: EdgeColor = options.noBlurEdges\r\n            ? { lighten: transp, darken: transp }\r\n            : defaultEdgeColor;\r\n        this.background = new ProveBildeBakgrunn(ctx, edgeColor);\r\n        this.circle = new ProveBildeSirkel(ctx, edgeColor);\r\n    }\r\n\r\n    private readonly options: ProveBildeOptions;\r\n    private readonly ctx: CanvasRenderingContext2D;\r\n    private readonly background: ProveBildeBakgrunn;\r\n    private readonly circle: ProveBildeSirkel;\r\n    private watchTimer: number | null = 0;\r\n\r\n    private static setDefaultFont(ctx: CanvasRenderingContext2D): void {\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.font = \"32px Arial\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n    }\r\n\r\n    private renderLogoText(text: string, cX: number, yOffset: number): void {\r\n        const { ctx } = this;\r\n        const [headerW, headerH] = [168, 42];\r\n\r\n        ctx.save();\r\n        ctx.translate(cX, yOffset + headerH / 2 + 2);\r\n        ProveBilde.setDefaultFont(ctx);\r\n        ctx.fillText(text.toUpperCase(), 0, 0, headerW - 8);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    private renderTime(dt: Date, format: \"date\" | \"time\", cX: number): void {\r\n        const { ctx } = this;\r\n        ctx.save();\r\n\r\n        const [w, h] = [164, 42];\r\n        const [, palH] = pal;\r\n        const cY = palH / 2;\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(cX, cY - h / 2, w, h);\r\n        ProveBilde.setDefaultFont(ctx);\r\n        ctx.wordSpacing = format === \"date\" ? \"-5px\" : \"-3px\";\r\n        const textParts =\r\n            format === \"date\"\r\n                ? [dt.getDate(), dt.getMonth() + 1, dt.getFullYear() % 1_000]\r\n                : [dt.getHours(), dt.getMinutes(), dt.getSeconds()];\r\n\r\n        const formatted = textParts\r\n            .map(p => p.toString().padStart(2, \"0\"))\r\n            .join(format === \"date\" ? \" - \" : \" : \");\r\n\r\n        ctx.fillText(formatted, cX + w / 2, cY + 2);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    stopWatch(): void {\r\n        if (this.watchTimer !== null) {\r\n            clearInterval(this.watchTimer);\r\n            this.watchTimer = null;\r\n        }\r\n    }\r\n\r\n    startWatch(): void {\r\n        const renderDateAndTime = (): void => {\r\n            const dt = new Date();\r\n            if (this.options.showDate) {\r\n                this.renderTime(dt, \"date\", 155);\r\n            }\r\n            if (this.options.showTime) {\r\n                this.renderTime(dt, \"time\", 449);\r\n            }\r\n        };\r\n        renderDateAndTime();\r\n        this.stopWatch();\r\n        this.watchTimer = setInterval(renderDateAndTime, 500);\r\n    }\r\n\r\n    start(): void {\r\n        const { ctx } = this;\r\n\r\n        ctx.save();\r\n        ctx.imageSmoothingEnabled = false;\r\n\r\n        //ctx.scale(2, 2);\r\n\r\n        this.background.render();\r\n        this.circle.render();\r\n\r\n        const [palW, palH] = pal;\r\n        const [centerX] = [palW / 2, palH / 2];\r\n\r\n        const o = this.options;\r\n        if (o.headerText) {\r\n            this.renderLogoText(o.headerText, centerX, 57);\r\n        }\r\n        if (o.footerText) {\r\n            this.renderLogoText(o.footerText, centerX, 436);\r\n        }\r\n\r\n        if (o.showDate || o.showTime) {\r\n            this.startWatch();\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    stop(): void {\r\n        this.stopWatch();\r\n    }\r\n}\r\n", "import { pal } from \"./constants.ts\";\r\nimport { debounce } from \"./debounce.ts\";\r\nimport { ProveBilde, type ProveBildeOptions } from \"./provebilde.ts\";\r\n\r\nconst options: ProveBildeOptions = {\r\n    headerText: \"J\u00F8rn A\",\r\n    footerText: \"Sundt\",\r\n    showDate: true,\r\n    showTime: true,\r\n    noBlurEdges: false\r\n};\r\n\r\nlet proveBilde: ProveBilde;\r\nlet canvas: HTMLCanvasElement;\r\n\r\nfunction init(): void {\r\n    if (proveBilde) {\r\n        proveBilde.stop();\r\n    }\r\n    if (!canvas) {\r\n        canvas = document.getElementById(\"provebilde\") as HTMLCanvasElement;\r\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\r\n        canvas.addEventListener(\"click\", e =>\r\n            (e.target as HTMLElement).requestFullscreen()\r\n        );\r\n    }\r\n    const ctx = canvas.getContext(\"2d\")!;\r\n    const [palW, palH] = pal;\r\n    const [winW, winH] = [window.innerWidth, window.innerHeight];\r\n    const [scaleX, scaleY] = [winW / palW, winH / palH];\r\n    const scale = Math.min(scaleX, scaleY);\r\n    canvas.width = palW * scale;\r\n    canvas.height = palH * scale;\r\n    ctx.scale(scale, scale);\r\n    proveBilde = new ProveBilde(ctx, options);\r\n    proveBilde.start();\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    init();\r\n});\r\n\r\nconst debouncedInit = debounce(init, 400);\r\n\r\nwindow.addEventListener(\"resize\", () => {\r\n    debouncedInit();\r\n});\r\n"],
  "mappings": "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",
  "names": ["options"]
}
