{
  "version": 3,
  "sources": ["../src/constants.ts", "../src/utils.ts", "../src/provebilde-canvas-background.ts", "../src/provebilde-canvas-circle.ts", "../src/provebilde-canvas.ts", "../src/webgl/webgl-util.ts", "../src/webgl/filters/filter-base.ts", "../src/webgl/filters/brightness-saturation-contrast.ts", "../src/webgl/filters/bulge-pinch.ts", "../src/webgl/filters/vignette.ts", "../src/webgl/shaders/vertex/base-flipped.ts", "../src/webgl/webgl-renderer.ts", "../src/provebilde-fx.ts", "../src/provebilde.ts", "../src/plugin.ts", "../src/index.ts"],
  "sourcesContent": ["import type { Size } from \"./abstractions.ts\";\r\n\r\nexport const pal: Size = [768, 576];\r\n", "import type { Size } from \"./abstractions.ts\";\r\n\r\ntype Func<TArgs extends any[], TReturn> = (...args: TArgs) => TReturn;\r\n\r\nexport function debounce<TArgs extends any[]>(\r\n    func: Func<TArgs, any>,\r\n    wait: number,\r\n    immediate: boolean = false\r\n): Func<TArgs, void> {\r\n    let timeout: number | null = null;\r\n    return (...args: TArgs) => {\r\n        const later = (): void => {\r\n            timeout = null;\r\n            if (!immediate) {\r\n                func(...args);\r\n            }\r\n        };\r\n        const callNow = immediate && !timeout;\r\n        if (timeout !== null) {\r\n            clearTimeout(timeout);\r\n        }\r\n        timeout = setTimeout(later, wait) as unknown as number;\r\n        if (callNow) {\r\n            func(...args);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Helper to overcome missing OffscreenCanvas support in Safari\r\n * @param size The size\r\n * @returns The off/on screen rendering context\r\n */\r\nexport function createOffscreenCanvasContext(\r\n    ...size: Size\r\n): CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D {\r\n    let result: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\n    if (\"OffscreenCanvas\" in self) {\r\n        result = new OffscreenCanvas(...size).getContext(\"2d\")!;\r\n    } else {\r\n        const canvas = document.createElement(\"canvas\");\r\n        [canvas.width, canvas.height] = size;\r\n        return canvas.getContext(\"2d\")!;\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function isSafari(win: Window): boolean {\r\n    return (\r\n        window.navigator.userAgent.includes(\"Mac OS X\") &&\r\n        window.navigator.userAgent.includes(\"Safari\")\r\n    );\r\n}\r\n\r\nlet isFullScreen = false;\r\nlet fullScreenTogglePromise: Promise<void> | null = null;\r\n\r\nexport function toggleFullScreen(elem: HTMLElement): void {\r\n    if (fullScreenTogglePromise) {\r\n        return;\r\n    }\r\n    if (isFullScreen) {\r\n        fullScreenTogglePromise = document.exitFullscreen();\r\n    } else {\r\n        fullScreenTogglePromise = elem.requestFullscreen();\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    fullScreenTogglePromise\r\n        .then(() => {\r\n            isFullScreen = !isFullScreen;\r\n        })\r\n        .finally(() => (fullScreenTogglePromise = null));\r\n}\r\n", "import type { Coord, EdgeColor } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\nimport { createOffscreenCanvasContext } from \"./utils.ts\";\r\n\r\nexport class ProveBildeCanvasBackground {\r\n    constructor(ctx: CanvasRenderingContext2D, edgeColor: EdgeColor) {\r\n        this.#edgeColor = edgeColor;\r\n        this.#ctx = ctx;\r\n        [this.#leftGridStripesPattern, this.#rightGridStripesPattern] =\r\n            this.#createGridStripePatterns(\r\n                [\"#b85a7a\", \"#3c9a7a\"],\r\n                [\"#7a64e9\", \"#7a900b\"]\r\n            );\r\n    }\r\n\r\n    readonly #ctx: CanvasRenderingContext2D;\r\n    readonly #edgeColor: EdgeColor;\r\n\r\n    readonly #leftGridStripesPattern: CanvasPattern;\r\n    readonly #rightGridStripesPattern: CanvasPattern;\r\n\r\n    readonly #gridSquareSize: number = 42;\r\n    readonly #defaultGray: string = \"#7a7a7a\";\r\n    readonly #gridOffset: Coord = [-15, -27];\r\n\r\n    get #gridSquareColCount(): number {\r\n        const [w] = pal;\r\n        const [offsetX] = this.#gridOffset;\r\n        const size = this.#gridSquareSize;\r\n        return Math.ceil((w - offsetX) / size);\r\n    }\r\n\r\n    get #gridSquareRowCount(): number {\r\n        const [, h] = pal;\r\n        const [, offsetY] = this.#gridOffset;\r\n        const size = this.#gridSquareSize;\r\n        return Math.ceil((h - offsetY) / size);\r\n    }\r\n\r\n    #drawGridSquare(fillStyle: string | CanvasPattern): void {\r\n        const size = this.#gridSquareSize;\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n\r\n        // Draw white outline\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(0, 0, size, size);\r\n\r\n        // Draw fill\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.fillRect(1, 1, size - 2, size - 2);\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.#edgeColor.lighten;\r\n        ctx.fillRect(1, 1, 1, size - 2);\r\n        ctx.fillRect(size - 2, 1, 1, size);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    #getGridSquareFill(...offset: Coord): string | CanvasPattern {\r\n        const [cols, rows] = [\r\n            this.#gridSquareColCount,\r\n            this.#gridSquareRowCount\r\n        ];\r\n        const [x, y] = offset;\r\n        const [gridOffsetX, gridOffsetY] = this.#gridOffset;\r\n        const horSquareIndex = (x - gridOffsetX) / this.#gridSquareSize;\r\n        const verSquareIndex = (y - gridOffsetY) / this.#gridSquareSize;\r\n        const isOutsideHorBounds =\r\n            horSquareIndex === 0 || horSquareIndex >= cols - 1;\r\n        const isOutsideVerBounds =\r\n            verSquareIndex === 0 || verSquareIndex >= rows - 1;\r\n        const isSecondLeftMostSquare = horSquareIndex === 1;\r\n        const isSecondRightMostSquare = horSquareIndex === cols - 2;\r\n        const isSecondTopMostSquare = verSquareIndex === 1;\r\n        const isSecondBottomMostSquare = verSquareIndex === rows - 2;\r\n\r\n        let result: string | CanvasPattern;\r\n        if (isOutsideHorBounds || isOutsideVerBounds) {\r\n            const isEven = (horSquareIndex + verSquareIndex) % 2 === 0;\r\n            result = isEven ? \"#fff\" : \"#000\";\r\n        } else if (isSecondLeftMostSquare) {\r\n            if (isSecondTopMostSquare) {\r\n                result = this.#makeHalfGridStripePattern(\r\n                    this.#leftGridStripesPattern,\r\n                    \"top\"\r\n                );\r\n            } else if (isSecondBottomMostSquare) {\r\n                result = this.#makeHalfGridStripePattern(\r\n                    this.#leftGridStripesPattern,\r\n                    \"bottom\"\r\n                );\r\n            } else {\r\n                result = this.#leftGridStripesPattern;\r\n            }\r\n        } else if (isSecondRightMostSquare) {\r\n            if (isSecondTopMostSquare) {\r\n                result = this.#makeHalfGridStripePattern(\r\n                    this.#rightGridStripesPattern,\r\n                    \"top\"\r\n                );\r\n            } else if (isSecondBottomMostSquare) {\r\n                result = this.#makeHalfGridStripePattern(\r\n                    this.#rightGridStripesPattern,\r\n                    \"bottom\"\r\n                );\r\n            } else {\r\n                result = this.#rightGridStripesPattern;\r\n            }\r\n        } else {\r\n            result = this.#defaultGray;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    #createGridStripePatterns(\r\n        ...palettes: Array<[color1: string, color2: string]>\r\n    ): CanvasPattern[] {\r\n        const ctx = createOffscreenCanvasContext(1, 4);\r\n        return palettes.map(([color1, color2]) => {\r\n            ctx.fillStyle = color1;\r\n            ctx.fillRect(0, 0, 1, 2);\r\n            ctx.fillStyle = color2;\r\n            ctx.fillRect(0, 2, 1, 2);\r\n            return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n        });\r\n    }\r\n\r\n    #makeHalfGridStripePattern(\r\n        stripePattern: CanvasPattern,\r\n        noStripesAt: \"top\" | \"bottom\"\r\n    ): CanvasPattern {\r\n        const ctx = createOffscreenCanvasContext(\r\n            this.#gridSquareSize,\r\n            this.#gridSquareSize\r\n        );\r\n        ctx.fillStyle = stripePattern;\r\n        ctx.fillRect(0, 0, this.#gridSquareSize, this.#gridSquareSize);\r\n        ctx.fillStyle = this.#defaultGray;\r\n        if (noStripesAt === \"top\") {\r\n            ctx.fillRect(0, 0, this.#gridSquareSize, this.#gridSquareSize / 2);\r\n        } else {\r\n            ctx.fillRect(\r\n                0,\r\n                this.#gridSquareSize / 2,\r\n                this.#gridSquareSize,\r\n                this.#gridSquareSize / 2\r\n            );\r\n        }\r\n        ctx.fill();\r\n        return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n    }\r\n\r\n    #drawGrid(): void {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n\r\n        // Render white background\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(0, 0, ...pal);\r\n\r\n        // Render grid squares\r\n        const [palW, palH] = pal;\r\n        const [gridOffsetX, gridOffsetY] = this.#gridOffset;\r\n        for (\r\n            let transY = gridOffsetY;\r\n            transY < palH;\r\n            transY += this.#gridSquareSize\r\n        ) {\r\n            for (\r\n                let transX = gridOffsetX;\r\n                transX < palW;\r\n                transX += this.#gridSquareSize\r\n            ) {\r\n                ctx.save();\r\n                ctx.translate(transX, transY);\r\n                this.#drawGridSquare(this.#getGridSquareFill(transX, transY));\r\n                ctx.restore();\r\n            }\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    #drawLeftColorBar(): void {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n        const colors: [string, string, string, string] = [\r\n            \"#3c9a7a\",\r\n            \"#577ad6\",\r\n            \"#b85a7a\",\r\n            \"#9d7a1e\"\r\n        ];\r\n        const squareSize = this.#gridSquareSize;\r\n        const [gridOffsetX, gridOffsetY] = this.#gridOffset;\r\n        const border = 2;\r\n\r\n        // Left 1/4:\r\n        [ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n\r\n        // Left 2/4\r\n        [, ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Left 3/4\r\n        [, , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 7.5 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Left 4/4\r\n        [, , , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.#edgeColor.lighten;\r\n\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 2 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 11 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 4 - border,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 3 - border,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            1,\r\n            squareSize * 7 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 4 - border,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.restore();\r\n    }\r\n\r\n    #drawRightColorBar(): void {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n        const colors: [string, string, string, string] = [\r\n            \"#577ad6\",\r\n            \"#7a900b\",\r\n            \"#9d7a1e\",\r\n            \"#7a64e9\"\r\n        ];\r\n        const squareSize = this.#gridSquareSize;\r\n        const [gridOffsetX, gridOffsetY] = this.#gridOffset;\r\n        const border = 2;\r\n\r\n        // Right 1/4\r\n        [ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Right 2/4:\r\n        [, ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n\r\n        // Right 3/4\r\n        [, , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Right 4/4\r\n        [, , , ctx.fillStyle] = colors;\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 7.5 - border / 2,\r\n            squareSize - border,\r\n            squareSize * 3.5 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            squareSize - border / 2,\r\n            squareSize * 2 - border\r\n        );\r\n\r\n        // Draw side \"blur\" borders\r\n        ctx.fillStyle = this.#edgeColor.lighten;\r\n\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 17 - border,\r\n            gridOffsetY + squareSize * 2 + border / 2,\r\n            1,\r\n            squareSize * 11 - border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 16 + border / 2,\r\n            gridOffsetY + squareSize * 4 - border / 2,\r\n            1,\r\n            squareSize * 7 + border\r\n        );\r\n        ctx.fillRect(\r\n            gridOffsetX + squareSize * 15 + border / 2,\r\n            gridOffsetY + squareSize * 11 + border / 2,\r\n            1,\r\n            squareSize * 2 - border\r\n        );\r\n        ctx.restore();\r\n    }\r\n\r\n    render(): void {\r\n        this.#drawGrid();\r\n        this.#drawLeftColorBar();\r\n        this.#drawRightColorBar();\r\n    }\r\n}\r\n", "import type { EdgeColor, Rect } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\nimport { createOffscreenCanvasContext } from \"./utils.ts\";\r\n\r\nexport class ProveBildeCanvasCircle {\r\n    constructor(ctx: CanvasRenderingContext2D, edgeColor: EdgeColor) {\r\n        this.#edgeColor = edgeColor;\r\n        this.#ctx = ctx;\r\n\r\n        const [palW, palH] = pal;\r\n        const [fW, fgH] = [84 * 6, 84 * 6];\r\n        const [fgX, fgY] = [palW / 2 - fW / 2, palH / 2 - fgH / 2];\r\n        this.#rect = [fgX, fgY, fW, fgH];\r\n    }\r\n\r\n    readonly #ctx: CanvasRenderingContext2D;\r\n    readonly #edgeColor: EdgeColor;\r\n    readonly #rect: Rect;\r\n\r\n    #translate<TReturn>(\r\n        x: number,\r\n        y: number,\r\n        callback: () => TReturn\r\n    ): TReturn {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        const result = callback();\r\n        ctx.restore();\r\n        return result;\r\n    }\r\n\r\n    #createGradientPattern(width: number): CanvasPattern {\r\n        const ctx = createOffscreenCanvasContext(width, 1);\r\n        const gradient = ctx.createLinearGradient(0, 0, width, 1);\r\n        gradient.addColorStop(0, \"#000\");\r\n        gradient.addColorStop(0.5, \"#fff\");\r\n        gradient.addColorStop(1, \"#000\");\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, width, 1);\r\n        return ctx.createPattern(ctx.canvas, \"repeat\")!;\r\n    }\r\n\r\n    #renderTopRow(): number {\r\n        const ctx = this.#ctx;\r\n        const [, , fW] = this.#rect;\r\n        const h = 21;\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n        return h;\r\n    }\r\n\r\n    #renderHeaderRow(): number {\r\n        const ctx = this.#ctx;\r\n        const [, , fW] = this.#rect;\r\n        const h = 42;\r\n        const w = 168;\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-w / 2, 0, w, h);\r\n        return h;\r\n    }\r\n\r\n    #renderReflectionCheckRow(inverse?: boolean): number {\r\n        const ctx = this.#ctx;\r\n        const [, , fW] = this.#rect;\r\n        const h = 42;\r\n\r\n        // Background rect\r\n        ctx.fillStyle = inverse ? \"#000\" : \"#fff\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        ctx.fillStyle = inverse ? \"#fff\" : \"#000\";\r\n\r\n        // Left rect\r\n        ctx.fillRect(-fW / 2, 0, 126, h);\r\n        // Right rect\r\n        ctx.fillRect(fW / 2 - 126, 0, 126, h);\r\n\r\n        // Reflection bar\r\n        ctx.fillRect(-fW / 2 + 145, 0, 4, h);\r\n        // Reflection bar Blur borders\r\n        ctx.fillStyle = inverse\r\n            ? \"rgb(0 0 0 / 0.333)\"\r\n            : \"rgb(255 255 255 / 0.333)\";\r\n        ctx.fillRect(-fW / 2 + 145, 0, 1, h);\r\n        ctx.fillRect(-fW / 2 + 148, 0, 1, h);\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderSquareWave75Row(): number {\r\n        const ctx = this.#ctx;\r\n        const itemW = 30;\r\n        const h = 42;\r\n        const [, , fW] = this.#rect;\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(-fW / 2, 0, fW, h);\r\n        ctx.clip();\r\n\r\n        for (let i = 0, x = -9 * itemW; i < 18; i++, x += itemW) {\r\n            ctx.fillStyle = i % 2 === 0 ? \"#bfbfbf\" : \"#000\";\r\n            ctx.fillRect(x, 0, itemW, h);\r\n        }\r\n\r\n        ctx.closePath();\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderColoBar75Row(): number {\r\n        const ctx = this.#ctx;\r\n        const h = 84;\r\n        const itemW = 84;\r\n        const colors = [\r\n            \"#bfbf00\",\r\n            \"#00bfbf\",\r\n            \"#00bf00\",\r\n            \"#bf00bf\",\r\n            \"#bf0000\",\r\n            \"#0000bf\"\r\n        ];\r\n        for (const [i, color] of colors.entries()) {\r\n            const x = (i - 3) * itemW;\r\n            ctx.fillStyle = color;\r\n            ctx.fillRect(x, 0, itemW, h);\r\n        }\r\n        return h;\r\n    }\r\n\r\n    #renderCrossedLines(): number {\r\n        const ctx = this.#ctx;\r\n        const [, , fW] = this.#rect;\r\n        const h = 42;\r\n        const itemW = 42;\r\n\r\n        // Black background\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        // Horizontal line\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.fillRect(-fW / 2, h / 2 - 1, fW, 2);\r\n\r\n        for (let x = -itemW * 6.5 - 2; x < itemW * 6.5; x += itemW) {\r\n            // Line\r\n            ctx.fillRect(x, 0, 4, h);\r\n\r\n            // Darkened edges:\r\n            ctx.save();\r\n            ctx.fillStyle = this.#edgeColor.darken;\r\n            ctx.fillRect(x, 0, 1, h);\r\n            ctx.fillRect(x + 3, 0, 1, h);\r\n            ctx.restore();\r\n        }\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderDefinitionLinesRow(): number {\r\n        const ctx = this.#ctx;\r\n        const h = 84;\r\n        const itemW = 84;\r\n        const [, , fW] = this.#rect;\r\n\r\n        ctx.beginPath();\r\n        ctx.rect(-fW / 2, 0, fW, h);\r\n        ctx.clip();\r\n\r\n        let x = -3.5 * itemW;\r\n        const pixelFactor = 12;\r\n        const squares = [\"#000\", 0.8, 1.8, 2.8, 3.8, 4.8, \"#000\"];\r\n        for (const fillInfo of squares) {\r\n            ctx.fillStyle =\r\n                typeof fillInfo === \"string\"\r\n                    ? fillInfo\r\n                    : this.#createGradientPattern(pixelFactor / fillInfo);\r\n\r\n            ctx.translate(x, 0);\r\n            ctx.fillRect(0, 0, itemW, h);\r\n            ctx.translate(-x, 0);\r\n            x += itemW;\r\n        }\r\n\r\n        ctx.closePath();\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderGrayScaleStairCaseRow(): number {\r\n        const ctx = this.#ctx;\r\n        const h = 42;\r\n        const itemW = 84;\r\n\r\n        let x = -3 * itemW;\r\n        for (let i = 0; i < 6; i++) {\r\n            const lightness = 51 * i;\r\n            const hex = Math.round(lightness).toString(16).padStart(2, \"0\");\r\n            ctx.fillStyle = `#${hex}${hex}${hex}`;\r\n            ctx.fillRect(x, 0, itemW, h);\r\n            x += itemW;\r\n        }\r\n        return h;\r\n    }\r\n\r\n    #renderColorStep75Row(): number {\r\n        const ctx = this.#ctx;\r\n        const h = 65;\r\n        const itemW = 40;\r\n        const [, , fW] = this.#rect;\r\n\r\n        ctx.fillStyle = \"#bfbf00\";\r\n        ctx.fillRect(-fW / 2, 0, fW, h);\r\n\r\n        ctx.fillStyle = \"rgb(185 25 18)\";\r\n        ctx.fillRect(-itemW / 2, 0, itemW, h);\r\n\r\n        ctx.fillStyle = \"rgb(255 255 255 / 0.333)\";\r\n        ctx.fillRect(-itemW / 2, 0, 1, h);\r\n        ctx.fillRect(itemW / 2 - 1, 0, 1, h);\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderCrossHair(): number {\r\n        const ctx = this.#ctx;\r\n        const h = 42 * 3;\r\n        const itemW = 38;\r\n\r\n        // Black background\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(-itemW / 2, 0, itemW, h);\r\n        // Darkened edges\r\n        ctx.save();\r\n        ctx.fillStyle = this.#edgeColor.darken;\r\n        ctx.fillRect(-itemW / 2 - 1, 0, 1, 42);\r\n        ctx.fillRect(itemW / 2, 0, 1, 42);\r\n        ctx.fillRect(-itemW / 2 - 1, 42 * 2, 1, 42);\r\n        ctx.fillRect(itemW / 2, 42 * 2, 1, 42);\r\n        ctx.restore();\r\n\r\n        ctx.fillStyle = \"#fff\";\r\n\r\n        // Horizontal line\r\n        ctx.fillRect(-itemW / 2, h / 2 - 1, itemW, 2);\r\n\r\n        // Vertical line\r\n        ctx.fillRect(-2, 0, 4, h);\r\n\r\n        // Darkened edges:\r\n        ctx.save();\r\n        ctx.fillStyle = this.#edgeColor.darken;\r\n        ctx.fillRect(-2, 0, 1, h);\r\n        ctx.fillRect(1, 0, 1, h);\r\n        ctx.restore();\r\n\r\n        return h;\r\n    }\r\n\r\n    #renderCompleteForground(y: number, cX: number): void {\r\n        const trans = this.#translate.bind(this);\r\n\r\n        // Row 1\r\n        y += trans(cX, y, () => this.#renderTopRow());\r\n\r\n        // Row 2\r\n        y += trans(cX, y, () => this.#renderHeaderRow());\r\n\r\n        // Row 3\r\n        y += trans(cX, y, () => this.#renderReflectionCheckRow(false));\r\n\r\n        // Row 4\r\n        y += trans(cX, y, () => this.#renderSquareWave75Row());\r\n\r\n        // Row 5\r\n        y += trans(cX, y, () => this.#renderColoBar75Row());\r\n\r\n        // Row 6\r\n        y += trans(cX, y, () => this.#renderCrossedLines());\r\n\r\n        // Row 7\r\n        y += trans(cX, y, () => this.#renderDefinitionLinesRow());\r\n\r\n        // Row 8\r\n        y += trans(cX, y, () => this.#renderGrayScaleStairCaseRow());\r\n\r\n        // Row 9\r\n        y += trans(cX, y, () => this.#renderReflectionCheckRow(true));\r\n\r\n        // Row 10\r\n        trans(cX, y, () => this.#renderColorStep75Row());\r\n\r\n        // Move y to top of crosshair\r\n        y = pal[1] / 2 - 63;\r\n        // Render crosshair\r\n        trans(cX, y, () => this.#renderCrossHair());\r\n    }\r\n\r\n    render(): void {\r\n        const [palW, palH] = pal;\r\n        const [centerX, centerY] = [palW / 2, palH / 2];\r\n        const radius = 84 * 3;\r\n\r\n        // Circle clip\r\n        const ctx = this.#ctx;\r\n        ctx.beginPath();\r\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\r\n        ctx.clip();\r\n\r\n        const foreGroundYOffset = (palH - radius * 2) / 2;\r\n        this.#renderCompleteForground(foreGroundYOffset, centerX);\r\n        ctx.closePath();\r\n    }\r\n}\r\n", "import type { EdgeColor } from \"./abstractions.ts\";\r\nimport { pal } from \"./constants.ts\";\r\nimport { ProveBildeCanvasBackground } from \"./provebilde-canvas-background.ts\";\r\nimport { ProveBildeCanvasCircle } from \"./provebilde-canvas-circle.ts\";\r\nimport { isSafari } from \"./utils.ts\";\r\n\r\nexport const defaultEdgeColor: EdgeColor = {\r\n    lighten: \"rgb(255 255 255 / 0.666)\",\r\n    darken: \"rgb(0 0 0 / 0.333)\"\r\n};\r\n\r\nexport interface ProveBildeCanvasOptions {\r\n    blurredEdgesDisabled?: boolean;\r\n    headerText?: string;\r\n    footerText?: string;\r\n    showDate?: boolean;\r\n    showTime?: boolean;\r\n    imageSmootingDisabled?: boolean;\r\n    date?: Date;\r\n}\r\n\r\nexport class ProveBildeCanvas {\r\n    constructor(\r\n        ctx: CanvasRenderingContext2D,\r\n        options: ProveBildeCanvasOptions = {}\r\n    ) {\r\n        this.#options = options;\r\n        this.#ctx = ctx;\r\n\r\n        const transp = \"rgb(0 0 0 / 0)\";\r\n        const edgeColor: EdgeColor = options.blurredEdgesDisabled\r\n            ? { lighten: transp, darken: transp }\r\n            : defaultEdgeColor;\r\n        this.#background = new ProveBildeCanvasBackground(ctx, edgeColor);\r\n        this.#circle = new ProveBildeCanvasCircle(ctx, edgeColor);\r\n        const safari = isSafari(window);\r\n        this.#textVerticalAdjust = safari ? 0 : 2;\r\n        // this.#dateTimeHorizontalPadding = safari ? 16 : 8;\r\n    }\r\n\r\n    readonly #options: ProveBildeCanvasOptions;\r\n    readonly #ctx: CanvasRenderingContext2D;\r\n    readonly #background: ProveBildeCanvasBackground;\r\n    readonly #circle: ProveBildeCanvasCircle;\r\n    readonly #textVerticalAdjust: number;\r\n\r\n    readonly #headFootHorizontalPadding: number = 6;\r\n\r\n    #setDefaultFont(): void {\r\n        const ctx = this.#ctx;\r\n        ctx.fillStyle = \"#fff\";\r\n        ctx.font = \"32px Arial, Helvetica, sans-serif\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.textBaseline = \"middle\";\r\n    }\r\n\r\n    #fillTextMonoSpaced(\r\n        ...fillArgs: Required<Parameters<CanvasRenderingContext2D[\"fillText\"]>>\r\n    ): void {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n        const [text, x, y, maxWidth] = fillArgs;\r\n        const charWidth = maxWidth / text.length;\r\n        const currX = x - (text.length * charWidth) / 2;\r\n\r\n        ctx.translate(maxWidth / 2 - 3, 0);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\r\n        for (let i = 0; i < text.length; i++) {\r\n            const char = text[i];\r\n            ctx.translate(charWidth, 0);\r\n            ctx.fillText(char, currX, y + this.#textVerticalAdjust, charWidth);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    #renderHeaderOrFooterText(text: string, cX: number, yOffset: number): void {\r\n        const ctx = this.#ctx;\r\n        const [headerW, headerH] = [168, 42];\r\n\r\n        ctx.save();\r\n        ctx.translate(cX, yOffset + headerH / 2 + this.#textVerticalAdjust);\r\n        this.#setDefaultFont();\r\n        ctx.fillText(\r\n            text.toUpperCase(),\r\n            0,\r\n            0,\r\n            headerW - this.#headFootHorizontalPadding * 2\r\n        );\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    #renderTime(dt: Date, format: \"date\" | \"time\", cX: number): void {\r\n        const ctx = this.#ctx;\r\n        ctx.save();\r\n\r\n        const [w, h] = [164, 42];\r\n        const [, palH] = pal;\r\n        const cY = palH / 2;\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect(cX, cY - h / 2, w, h);\r\n        this.#setDefaultFont();\r\n        const textParts =\r\n            format === \"date\"\r\n                ? [dt.getDate(), dt.getMonth() + 1, dt.getFullYear() % 100]\r\n                : [dt.getHours(), dt.getMinutes(), dt.getSeconds()];\r\n\r\n        const formatted = textParts\r\n            .map(p => p.toString().padStart(2, \"0\"))\r\n            .join(format === \"date\" ? \"-\" : \":\");\r\n\r\n        this.#fillTextMonoSpaced(\r\n            formatted,\r\n            cX,\r\n            cY,\r\n            w - this.#headFootHorizontalPadding * 2\r\n        );\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    renderInitial(): void {\r\n        const ctx = this.#ctx;\r\n\r\n        ctx.save();\r\n\r\n        if (this.#options.imageSmootingDisabled) {\r\n            ctx.imageSmoothingEnabled = false;\r\n        }\r\n\r\n        this.#background.render();\r\n        this.#circle.render();\r\n\r\n        const [palW, palH] = pal;\r\n        const [centerX] = [palW / 2, palH / 2];\r\n\r\n        const o = this.#options;\r\n        if (o.headerText) {\r\n            this.#renderHeaderOrFooterText(o.headerText, centerX, 57);\r\n        }\r\n        if (o.footerText) {\r\n            this.#renderHeaderOrFooterText(o.footerText, centerX, 436);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    renderFrame(timeDelta: number = 0): void {\r\n        const dt = new Date(Date.now() - timeDelta);\r\n        if (this.#options.showDate) {\r\n            this.#renderTime(dt, \"date\", 155);\r\n        }\r\n        if (this.#options.showTime) {\r\n            this.#renderTime(dt, \"time\", 449);\r\n        }\r\n    }\r\n}\r\n", "export class WebGLUtil {\r\n    static createProgram(\r\n        gl: WebGLRenderingContext,\r\n        ...shaders: WebGLShader[]\r\n    ): WebGLProgram {\r\n        const program = gl.createProgram();\r\n        for (const shader of shaders) {\r\n            gl.attachShader(program, shader);\r\n        }\r\n        gl.linkProgram(program);\r\n        return program;\r\n    }\r\n\r\n    /**\r\n      Bind the active array buffer.\r\n     * @param gl The WebGLRenderingContext\r\n     * @param program The WebGLProgram\r\n     * @param vertices The array to bind\r\n     */\r\n    static setBufferAndSetPositionAttribute(\r\n        gl: WebGLRenderingContext,\r\n        program: WebGLProgram,\r\n        vertices: Float32Array\r\n    ): void {\r\n        // Bind the active array buffer.\r\n        const vertexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\r\n\r\n        // Set and enable our array buffer as the program's \"position\" variable\r\n        const positionLocation = gl.getAttribLocation(program!, \"position\");\r\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(positionLocation);\r\n    }\r\n\r\n    static setImageTexture(\r\n        gl: WebGLRenderingContext,\r\n        image:\r\n            | ImageData\r\n            | HTMLImageElement\r\n            | HTMLCanvasElement\r\n            | OffscreenCanvas\r\n    ): void {\r\n        const texture = gl.createTexture();\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n            0,\r\n            gl.RGBA,\r\n            gl.RGBA,\r\n            gl.UNSIGNED_BYTE,\r\n            image\r\n        );\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    }\r\n\r\n    static #compileShader(\r\n        gl: WebGLRenderingContext,\r\n        shaderSource: string,\r\n        type:\r\n            | WebGLRenderingContext[\"VERTEX_SHADER\"]\r\n            | WebGL2RenderingContext[\"FRAGMENT_SHADER\"]\r\n    ): WebGLShader {\r\n        const shader = gl.createShader(type)!;\r\n        gl.shaderSource(shader, shaderSource);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const log =\r\n                gl\r\n                    .getShaderInfoLog(shader)\r\n                    // eslint-disable-next-line no-control-regex\r\n                    ?.replace(/[\\u0000]/u, \"\") ?? \"\"?.trim();\r\n            const logMessages = log.split(/\\r?\\n/u).filter(s => !!s);\r\n            const lastMessage = !logMessages.length\r\n                ? \"no message\"\r\n                : logMessages[logMessages.length - 1];\r\n            throw new Error(\r\n                `Shader failed to compile: ${lastMessage ?? \"no message\"}`\r\n            );\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    static compileVertexShader(\r\n        gl: WebGLRenderingContext,\r\n        shaderSource: string\r\n    ): WebGLShader {\r\n        return this.#compileShader(gl, shaderSource, gl.VERTEX_SHADER);\r\n    }\r\n\r\n    static compileFragmentShader(\r\n        gl: WebGLRenderingContext,\r\n        shaderSource: string\r\n    ): WebGLShader {\r\n        return this.#compileShader(gl, shaderSource, gl.FRAGMENT_SHADER);\r\n    }\r\n\r\n    static compileFragmentShaders(\r\n        gl: WebGLRenderingContext,\r\n        ...shaderSources: string[]\r\n    ): WebGLShader[] {\r\n        return shaderSources.map(source =>\r\n            this.compileFragmentShader(gl, source)\r\n        );\r\n    }\r\n\r\n    static clamp(minValue: number, value: number, maxValue: number): number {\r\n        return Math.min(Math.max(value, minValue), maxValue);\r\n    }\r\n}\r\n", "import type { UniformValue } from \"../abstractions.ts\";\r\nimport { WebGLUtil } from \"../webgl-util.ts\";\r\nimport type { IFilter } from \"./abstractions.ts\";\r\n\r\nexport const baseFragmentShader = `\r\n  precision highp float;\r\n\r\n  varying vec2 texCoords;\r\n  uniform sampler2D textureSampler;\r\n\r\n  void main() {\r\n    vec4 color = texture2D(textureSampler, texCoords);\r\n    gl_FragColor = color;\r\n  }\r\n`;\r\n\r\nexport class FilterBase<\r\n    TParams extends Record<string, UniformValue> = Record<string, UniformValue>\r\n> implements IFilter<TParams>\r\n{\r\n    constructor(\r\n        fragmentShaderSource: string = baseFragmentShader,\r\n        params?: TParams\r\n    ) {\r\n        this.fragmentShaderSource = fragmentShaderSource;\r\n        if (params) {\r\n            this.params = params;\r\n        }\r\n    }\r\n\r\n    readonly params?: Readonly<TParams>;\r\n    readonly fragmentShaderSource: string;\r\n\r\n    #program?: WebGLProgram;\r\n\r\n    getProgram(\r\n        gl: WebGLRenderingContext,\r\n        vertexShader: WebGLShader\r\n    ): WebGLProgram {\r\n        if (this.#program) {\r\n            return this.#program;\r\n        }\r\n\r\n        const fragmentShader = WebGLUtil.compileFragmentShader(\r\n            gl,\r\n            this.fragmentShaderSource\r\n        );\r\n\r\n        return (this.#program = WebGLUtil.createProgram(\r\n            gl,\r\n            vertexShader,\r\n            fragmentShader\r\n        ));\r\n    }\r\n}\r\n", "import type { UniformValue } from \"../abstractions.ts\";\r\nimport { FilterBase } from \"./filter-base.ts\";\r\n\r\nconst brightnessSaturationContrastFragmentShader = `\r\n    precision highp float;\r\n    varying vec2 texCoords;\r\n    uniform sampler2D textureSampler;\r\n\r\n    uniform float brightness;\r\n    uniform float contrast;\r\n    uniform float saturation;\r\n\r\n    vec3 adjustBrightness(vec3 color, float brightness) {\r\n        return color + brightness;\r\n    }\r\n\r\n    vec3 adjustContrast(vec3 color, float contrast) {\r\n        return 0.5 + (contrast + 1.0) * (color.rgb - 0.5);\r\n    }\r\n\r\n    vec3 adjustSaturation(vec3 color, float saturation) {\r\n        // WCAG 2.1 relative luminance base\r\n        const vec3 luminanceWeighting = vec3(0.2126, 0.7152, 0.0722);\r\n        vec3 grayscaleColor = vec3(dot(color, luminanceWeighting));\r\n        return mix(grayscaleColor, color, 1.0 + saturation);\r\n    }\r\n\r\n    void main() {\r\n        vec4 color = texture2D(textureSampler, texCoords);\r\n\r\n        color.rgb = adjustBrightness(color.rgb, brightness);\r\n        color.rgb = adjustSaturation(color.rgb, saturation);\r\n        color.rgb = adjustContrast(color.rgb, contrast);\r\n\r\n        gl_FragColor = color;\r\n    }\r\n`;\r\n\r\nexport interface BrightnessSaturationContrastFilterParams\r\n    extends Record<string, UniformValue> {\r\n    brightness: number;\r\n    contrast: number;\r\n    saturation: number;\r\n}\r\n\r\nexport class BrightnessSaturationContrastFilter extends FilterBase<BrightnessSaturationContrastFilterParams> {\r\n    constructor(params: BrightnessSaturationContrastFilterParams) {\r\n        super(brightnessSaturationContrastFragmentShader, params);\r\n    }\r\n}\r\n", "import type { UniformValue } from \"../abstractions.ts\";\r\nimport { FilterBase } from \"./filter-base.ts\";\r\n\r\nconst bulgePinchFragmentShader = `\r\n    precision highp float;\r\n    varying vec2 texCoords;\r\n    uniform sampler2D textureSampler;\r\n\r\n    uniform vec2  texSize;\r\n    uniform float radius;\r\n    uniform float strength;\r\n    uniform vec2  center;\r\n\r\n    void main() {\r\n        vec2 coord = texCoords * texSize;\r\n        coord -= center;\r\n        float distance = length(coord);\r\n        if (distance < radius) {\r\n            float percent = distance / radius;\r\n            if (strength > 0.0) {\r\n                coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);\r\n            } else {\r\n                coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\r\n            }\r\n        }\r\n        coord += center;\r\n        gl_FragColor = texture2D(textureSampler, coord / texSize);\r\n        vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);\r\n        if (coord != clampedCoord) {\r\n            /* fade to transparent if we are outside the image */\r\n            gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface BulgePinchFilterParams extends Record<string, UniformValue> {\r\n    texSize: [w: number, h: number];\r\n    center: [x: number, y: number];\r\n    radius: number;\r\n    strength: number;\r\n}\r\n\r\nexport class BulgePinchFilter extends FilterBase<BulgePinchFilterParams> {\r\n    constructor(params: BulgePinchFilterParams) {\r\n        super(bulgePinchFragmentShader, params);\r\n    }\r\n}\r\n", "import type { UniformValue } from \"../abstractions.ts\";\r\nimport { FilterBase } from \"./filter-base.ts\";\r\n\r\nconst vignetteFragmentShader: string = `\r\n    precision highp float;\r\n    varying vec2 texCoords;\r\n    uniform sampler2D textureSampler;\r\n\r\n    uniform float size;\r\n    uniform float amount;\r\n\r\n    vec3 vignette(vec3 color, float size, float amount) {\r\n        float dist = distance(texCoords, vec2(0.5, 0.5));\r\n        return color * smoothstep(0.8, size * 0.799, dist * (amount + size));\r\n    }\r\n\r\n    void main() {\r\n        vec4 color = texture2D(textureSampler, texCoords);\r\n\r\n        color.rgb = vignette(color.rgb, size, amount);\r\n\r\n        gl_FragColor = color;\r\n    }\r\n`;\r\n\r\nexport interface VignetteFilterParams extends Record<string, UniformValue> {\r\n    size: number;\r\n    amount: number;\r\n}\r\n\r\nexport class VignetteFilter extends FilterBase<VignetteFilterParams> {\r\n    constructor(params: VignetteFilterParams) {\r\n        super(vignetteFragmentShader, params);\r\n    }\r\n}\r\n", "export const baseVertexShaderFlipped = `\r\n  attribute vec2 position;\r\n  varying vec2 texCoords;\r\n\r\n  void main() {\r\n    texCoords = (position + 1.0) / 2.0;\r\n\r\n    ////////////////////////////////////////\r\n    // FLIP: UNCOMMENT LINE BELOW TO FLIP //\r\n    ////////////////////////////////////////\r\n    texCoords.y = 1.0 - texCoords.y;\r\n\r\n    gl_Position = vec4(position, 0, 1.0);\r\n  }\r\n`;\r\n", "import type { UniformValue, WebGLConstant } from \"./abstractions.ts\";\r\nimport type { IFilter } from \"./filters/abstractions.ts\";\r\nimport { FilterBase } from \"./filters/filter-base.ts\";\r\nimport type { ILogger } from \"./logger.ts\";\r\nimport { baseVertexShaderFlipped } from \"./shaders/vertex/base-flipped.ts\";\r\nimport { WebGLUtil } from \"./webgl-util.ts\";\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Reference: https://medium.com/eureka-engineering/image-processing-with-webgl-c2af552e8df0\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ntype TypeLocationInfo = [type: number, location: WebGLUniformLocation];\r\n\r\nexport class WebGLRenderer {\r\n    constructor(\r\n        canvas: HTMLCanvasElement = document.createElement(\"canvas\"),\r\n        ...filters: IFilter[]\r\n    ) {\r\n        const gl = canvas.getContext(\"webgl\");\r\n        if (!gl) {\r\n            throw new Error(\"WebGL not supported\");\r\n        }\r\n\r\n        // Ensure we use base fragment shader if no filters are provided\r\n        if (!filters.length) {\r\n            filters.push(new FilterBase());\r\n        }\r\n\r\n        this.#gl = gl;\r\n        this.#logger = console;\r\n        this.#filters = filters;\r\n    }\r\n\r\n    readonly #gl: WebGLRenderingContext;\r\n    readonly #filters: IFilter[];\r\n    readonly #logger: ILogger;\r\n\r\n    #currentProgram: WebGLProgram | null = null;\r\n    readonly #vertices: Float32Array = new Float32Array([\r\n        -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1\r\n    ]);\r\n    #vertexShader: WebGLShader | null = null;\r\n\r\n    #programUniformLocations: Map<string, TypeLocationInfo> = new Map();\r\n\r\n    #useProgram(program: WebGLProgram): WebGLProgram {\r\n        const gl = this.#gl;\r\n        gl.useProgram(program);\r\n        this.#currentProgram = program;\r\n        this.#programUniformLocations = WebGLRenderer.#getUniforms(gl, program);\r\n        return this.#currentProgram;\r\n    }\r\n\r\n    static #getUniforms(\r\n        gl: WebGLRenderingContext,\r\n        program: WebGLProgram\r\n    ): Map<string, TypeLocationInfo> {\r\n        const result = new Map<string, TypeLocationInfo>();\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n\r\n        for (let i = 0; i < numUniforms; i++) {\r\n            const info = gl.getActiveUniform(program, i);\r\n            if (info === null) {\r\n                throw new Error(`Couldn't get uniform at index: ${i}.`);\r\n            }\r\n            const location = gl.getUniformLocation(program, info.name);\r\n            if (location) {\r\n                result.set(info.name, [info.type, location]);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // eslint-disable-next-line complexity\r\n    #setUniform(name: string, value: UniformValue): void {\r\n        const gl = this.#gl;\r\n        const [type, location] =\r\n            this.#programUniformLocations.get(name) ??\r\n            ([undefined, undefined] as const);\r\n\r\n        const getTypeAndLengthDesc = (t: string, length?: number): string =>\r\n            `${t}${length ? `[${length}]` : \"\"}`;\r\n\r\n        const logWrongType = (\r\n            nm: string,\r\n            glEnumName: WebGLConstant,\r\n            expectedType: string,\r\n            actualType: string,\r\n            expectedLength?: number,\r\n            actualLength?: number\r\n        ): void =>\r\n            this.#logger.warn(\r\n                `Wrong type for uniform '${nm}' (${glEnumName})  Expected: ${getTypeAndLengthDesc(expectedType, expectedLength)}, Actual: ${getTypeAndLengthDesc(actualType, actualLength)}`\r\n            );\r\n\r\n        const tryEnsureTypedArray = <T extends Float32Array | Int32Array>(\r\n            arr: UniformValue,\r\n            convert: (a: number[]) => T\r\n        ): T | UniformValue => {\r\n            if (arr instanceof Float32Array || arr instanceof Int32Array) {\r\n                return arr;\r\n            }\r\n            return Array.isArray(arr) ? convert(arr) : arr;\r\n        };\r\n\r\n        switch (type) {\r\n            case undefined: {\r\n                this.#logger.warn(`Unknown uniform name: ${name}`);\r\n                break;\r\n            }\r\n            case gl.FLOAT: {\r\n                if (typeof value !== \"number\") {\r\n                    logWrongType(name, \"FLOAT\", \"number\", typeof value);\r\n                    break;\r\n                }\r\n                gl.uniform1fv(location, [value]);\r\n                break;\r\n            }\r\n            case gl.FLOAT_VEC2: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Float32Array(a)\r\n                );\r\n                if (!(nValue instanceof Float32Array) || nValue.length !== 2) {\r\n                    logWrongType(\r\n                        name,\r\n                        \"FLOAT_VEC2\",\r\n                        \"Float32Array\",\r\n                        typeof nValue,\r\n                        2,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform2fv(location, nValue);\r\n                break;\r\n            }\r\n            case gl.FLOAT_VEC3: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Float32Array(a)\r\n                );\r\n                if (!(nValue instanceof Float32Array) || nValue.length !== 3) {\r\n                    logWrongType(\r\n                        name,\r\n                        \"FLOAT_VEC3\",\r\n                        \"Float32Array\",\r\n                        typeof nValue,\r\n                        3,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform3fv(location, nValue);\r\n                break;\r\n            }\r\n            case gl.FLOAT_VEC4: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Float32Array(a)\r\n                );\r\n                if (!(nValue instanceof Float32Array) || nValue.length !== 4) {\r\n                    logWrongType(\r\n                        name,\r\n                        \"FLOAT_VEC4\",\r\n                        \"Float32Array\",\r\n                        typeof nValue,\r\n                        4,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform4fv(location, nValue);\r\n                break;\r\n            }\r\n            case gl.BOOL:\r\n            case gl.INT: {\r\n                if (typeof value !== \"number\") {\r\n                    logWrongType(\r\n                        name,\r\n                        type === gl.BOOL ? \"BOOL\" : \"INT\",\r\n                        \"number\",\r\n                        typeof value\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform1iv(location, [value]);\r\n                break;\r\n            }\r\n            case gl.BOOL_VEC2:\r\n            case gl.INT_VEC2: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Int32Array(a)\r\n                );\r\n                if (!(nValue instanceof Int32Array) || nValue.length !== 2) {\r\n                    logWrongType(\r\n                        name,\r\n                        type === gl.BOOL_VEC2 ? \"BOOL_VEC2\" : \"INT_VEC2\",\r\n                        \"Int32Array\",\r\n                        typeof nValue,\r\n                        2,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform2iv(location, nValue);\r\n                break;\r\n            }\r\n            case gl.BOOL_VEC3:\r\n            case gl.INT_VEC3: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Int32Array(a)\r\n                );\r\n                if (!(nValue instanceof Int32Array) || nValue.length !== 3) {\r\n                    logWrongType(\r\n                        name,\r\n                        type === gl.BOOL_VEC3 ? \"BOOL_VEC3\" : \"INT_VEC3\",\r\n                        \"Int32Array\",\r\n                        typeof nValue,\r\n                        3,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform3iv(location, nValue);\r\n                break;\r\n            }\r\n            case gl.BOOL_VEC4:\r\n            case gl.INT_VEC4: {\r\n                const nValue = tryEnsureTypedArray(\r\n                    value,\r\n                    a => new Int32Array(a)\r\n                );\r\n                if (!(nValue instanceof Int32Array) || nValue.length !== 4) {\r\n                    logWrongType(\r\n                        name,\r\n                        type === gl.BOOL_VEC4 ? \"BOOL_VEC4\" : \"INT_VEC4\",\r\n                        \"Int32Array\",\r\n                        typeof nValue,\r\n                        4,\r\n                        typeof nValue === \"object\" && \"length\" in nValue\r\n                            ? nValue.length\r\n                            : undefined\r\n                    );\r\n                    break;\r\n                }\r\n                gl.uniform4iv(location, nValue);\r\n                break;\r\n            }\r\n            default: {\r\n                this.#logger.warn(`Unknown uniform type: ${type}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    #getVertexShader(): WebGLShader {\r\n        if (this.#vertexShader) {\r\n            return this.#vertexShader;\r\n        }\r\n\r\n        const vertexShader = WebGLUtil.compileVertexShader(\r\n            this.#gl,\r\n            baseVertexShaderFlipped\r\n        );\r\n\r\n        return (this.#vertexShader = vertexShader);\r\n    }\r\n\r\n    renderImage(\r\n        image: HTMLImageElement | HTMLCanvasElement | OffscreenCanvas\r\n    ): void {\r\n        const gl = this.#gl;\r\n\r\n        const [w, h] = [gl.drawingBufferWidth, gl.drawingBufferHeight];\r\n\r\n        // Set the viewport to cover the canvas\r\n        gl.viewport(0, 0, w, h);\r\n\r\n        const vertexShader = this.#getVertexShader();\r\n\r\n        for (const filter of this.#filters) {\r\n            // Enable the program\r\n            const program = this.#useProgram(\r\n                filter.getProgram(gl, vertexShader)\r\n            );\r\n\r\n            // Bind the active array buffer and set position attribute\r\n            WebGLUtil.setBufferAndSetPositionAttribute(\r\n                gl,\r\n                program,\r\n                this.#vertices\r\n            );\r\n\r\n            // Create a texture\r\n            WebGLUtil.setImageTexture(gl, image);\r\n\r\n            // Load uniforms (parameters) for the fragment shaders\r\n            for (const [name, value] of Object.entries(filter.params ?? {})) {\r\n                this.#setUniform(name, value);\r\n            }\r\n\r\n            // Draw our 6 VERTICES as 2 triangles\r\n            gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n            gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n\r\n            image = this.#gl.canvas;\r\n        }\r\n    }\r\n}\r\n", "import type { IFilter } from \"./webgl/filters/abstractions.ts\";\r\nimport {\r\n    BrightnessSaturationContrastFilter,\r\n    type BrightnessSaturationContrastFilterParams\r\n} from \"./webgl/filters/brightness-saturation-contrast.ts\";\r\nimport { BulgePinchFilter } from \"./webgl/filters/bulge-pinch.ts\";\r\nimport {\r\n    VignetteFilter,\r\n    type VignetteFilterParams\r\n} from \"./webgl/filters/vignette.ts\";\r\nimport { WebGLRenderer } from \"./webgl/webgl-renderer.ts\";\r\n\r\nexport interface ProvebildeFxOptions {\r\n    brightnessSaturationContrast?: BrightnessSaturationContrastFilterParams;\r\n    bulgePinch?: { strength: number };\r\n    vignette?: VignetteFilterParams;\r\n}\r\n\r\nexport class ProveBildeFx {\r\n    constructor(ctx: CanvasRenderingContext2D, options?: ProvebildeFxOptions) {\r\n        this.#ctx = ctx;\r\n        this.#options = options;\r\n    }\r\n\r\n    readonly #ctx: CanvasRenderingContext2D;\r\n    readonly #options?: Readonly<ProvebildeFxOptions> | undefined;\r\n    #renderer?: WebGLRenderer;\r\n\r\n    static getDefaultFx(): ProvebildeFxOptions {\r\n        return {\r\n            brightnessSaturationContrast: {\r\n                brightness: 0,\r\n                saturation: -0.7,\r\n                contrast: 0.3\r\n            },\r\n            bulgePinch: {\r\n                strength: 0.07\r\n            },\r\n            vignette: {\r\n                size: 0.25,\r\n                amount: 0.58\r\n            }\r\n        };\r\n    }\r\n\r\n    renderInitial(): void {\r\n        const className = \"provebilde-fx\";\r\n        const source = this.#ctx.canvas;\r\n        let glCanvas = source.parentElement?.querySelector(\r\n            `.${className}`\r\n        ) as HTMLCanvasElement | null;\r\n        if (glCanvas) {\r\n            glCanvas.remove();\r\n        }\r\n\r\n        source.style.display = \"none\";\r\n        glCanvas = document.createElement(\"canvas\");\r\n        glCanvas.className = className;\r\n        glCanvas.width = source.width;\r\n        glCanvas.height = source.height;\r\n        source.parentNode!.insertBefore(glCanvas, source);\r\n\r\n        const o = this.#options;\r\n        const filters: IFilter[] = [];\r\n        if (o?.brightnessSaturationContrast) {\r\n            filters.push(\r\n                new BrightnessSaturationContrastFilter(\r\n                    o.brightnessSaturationContrast\r\n                )\r\n            );\r\n        }\r\n        if (o?.bulgePinch) {\r\n            filters.push(\r\n                new BulgePinchFilter({\r\n                    texSize: [source.width, source.height],\r\n                    center: [source.width / 2, source.height / 2],\r\n                    radius: source.width * 0.75,\r\n                    strength: o.bulgePinch.strength\r\n                })\r\n            );\r\n        }\r\n        if (o?.vignette) {\r\n            filters.push(new VignetteFilter(o.vignette));\r\n        }\r\n\r\n        if (filters.length) {\r\n            this.#renderer = new WebGLRenderer(glCanvas, ...filters);\r\n        }\r\n    }\r\n\r\n    renderFrame(): void {\r\n        this.#renderer?.renderImage(this.#ctx.canvas);\r\n    }\r\n}\r\n", "import {\r\n    ProveBildeCanvas,\r\n    type ProveBildeCanvasOptions\r\n} from \"./provebilde-canvas.ts\";\r\nimport { ProveBildeFx, type ProvebildeFxOptions } from \"./provebilde-fx.ts\";\r\n\r\nexport interface ProveBildeOptions extends ProveBildeCanvasOptions {\r\n    fx?: ProvebildeFxOptions;\r\n}\r\n\r\nexport class ProveBilde {\r\n    constructor(ctx: CanvasRenderingContext2D, options: ProveBildeOptions) {\r\n        this.#options = options;\r\n        this.#provebildeCanvas = new ProveBildeCanvas(ctx, options);\r\n        if (options.fx) {\r\n            this.#provebildeFx = new ProveBildeFx(ctx, options.fx);\r\n        }\r\n    }\r\n    readonly #options: Readonly<ProveBildeOptions>;\r\n    readonly #provebildeCanvas: ProveBildeCanvas;\r\n    readonly #provebildeFx: ProveBildeFx | null = null;\r\n    #watchTimer: number | null = 0;\r\n\r\n    static getDefaultOptions(): ProveBildeOptions {\r\n        return {\r\n            headerText: \"jasMIN\",\r\n            footerText: \"Retro TV\",\r\n            showDate: true,\r\n            showTime: true,\r\n\r\n            // date: new Date(1985, 4, 12, 1, 23, 35),\r\n\r\n            blurredEdgesDisabled: false,\r\n            imageSmootingDisabled: false,\r\n            fx: ProveBildeFx.getDefaultFx()\r\n        };\r\n    }\r\n\r\n    stopWatch(): void {\r\n        if (this.#watchTimer !== null) {\r\n            clearInterval(this.#watchTimer);\r\n            this.#watchTimer = null;\r\n        }\r\n    }\r\n\r\n    startWatch(): void {\r\n        const timeDelta = !this.#options.date\r\n            ? 0\r\n            : Date.now() - this.#options.date.getTime();\r\n\r\n        const renderFrame = (): void => {\r\n            this.#provebildeCanvas.renderFrame(timeDelta);\r\n            this.#provebildeFx?.renderFrame();\r\n        };\r\n\r\n        renderFrame();\r\n        this.stopWatch(); // Ensure no duplicates\r\n        this.#watchTimer = setInterval(renderFrame, 500);\r\n    }\r\n\r\n    start(): void {\r\n        const o = this.#options;\r\n        this.#provebildeCanvas.renderInitial();\r\n        this.#provebildeFx?.renderInitial();\r\n        if (o.showDate || o.showTime) {\r\n            this.startWatch();\r\n        }\r\n    }\r\n\r\n    stop(): void {\r\n        this.stopWatch();\r\n    }\r\n}\r\n", "import { pal } from \"./constants.ts\";\r\nimport { ProveBilde, type ProveBildeOptions } from \"./provebilde.ts\";\r\nimport { debounce, toggleFullScreen } from \"./utils.ts\";\r\n\r\nexport interface ProveBildePluginOptions extends ProveBildeOptions {\r\n    /** selector string or element */\r\n    container: string | HTMLElement;\r\n}\r\n\r\nlet proveBilde: ProveBilde;\r\nlet canvas: HTMLCanvasElement;\r\nlet options: ProveBildePluginOptions;\r\n\r\nfunction start(): void {\r\n    if (proveBilde) {\r\n        proveBilde.stop();\r\n    }\r\n    const ctx = canvas.getContext(\"2d\")!;\r\n    const [palW, palH] = pal;\r\n    const [winW, winH] = [\r\n        ctx.canvas.parentElement!.clientWidth,\r\n        ctx.canvas.parentElement!.clientHeight\r\n    ];\r\n    const [scaleX, scaleY] = [winW / palW, winH / palH];\r\n    const scale = Math.min(scaleX, scaleY);\r\n    canvas.width = palW * scale;\r\n    canvas.height = palH * scale;\r\n    ctx.scale(scale, scale);\r\n    proveBilde = new ProveBilde(ctx, options);\r\n    proveBilde.start();\r\n    document.body.style.zoom = \"1\";\r\n}\r\n\r\nconst debouncedStart = debounce(start, 100);\r\n\r\nexport function initPlugin(o: ProveBildePluginOptions): void {\r\n    options = o;\r\n    const container =\r\n        typeof options.container === \"string\"\r\n            ? document.querySelector(options.container)!\r\n            : options.container;\r\n\r\n    container.innerHTML = \"\";\r\n    canvas = document.createElement(\"canvas\");\r\n    container?.appendChild(canvas);\r\n    const resizeObserver = new ResizeObserver(debouncedStart);\r\n    resizeObserver.observe(container);\r\n    start();\r\n    container.addEventListener(\"click\", e => {\r\n        toggleFullScreen(e.currentTarget as HTMLElement);\r\n    });\r\n}\r\n", "import { initPlugin, type ProveBildePluginOptions } from \"./plugin.ts\";\r\n\r\nconst options: ProveBildePluginOptions = {\r\n    container: document.body,\r\n    headerText: \"jasMIN\",\r\n    footerText: \"Retro TV\",\r\n    showDate: true,\r\n    showTime: true,\r\n\r\n    // date: new Date(1985, 4, 12, 1, 23, 35),\r\n\r\n    blurredEdgesDisabled: false,\r\n    imageSmootingDisabled: false,\r\n    fx: {\r\n        brightnessSaturationContrast: {\r\n            brightness: 0,\r\n            saturation: -0.7,\r\n            contrast: 0.3\r\n        },\r\n        bulgePinch: {\r\n            strength: 0.07\r\n        },\r\n        vignette: {\r\n            size: 0.25,\r\n            amount: 0.58\r\n        }\r\n    }\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    initPlugin(options);\r\n});\r\n"],
  "mappings": "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",
  "names": ["canvas", "options", "canvas", "options", "options", "options"]
}
